---
title: "DGE from Illumina/salmon quants with edgeR"
format: html
self-contained: true
editor_options: 
  chunk_output_type: console
---

## DGE analysis

Here, we will run a preliminary vanilla edgeR analysis for the Illumina data from Gloria and Madison, in order to get some quick DGE results.

## Load packages

```{r warning=FALSE, message=FALSE}
library(tidyr)
library(dplyr)
library(readr)
library(tibble)
library(edgeR)
library(pheatmap)
library(tximeta)
library(SingleCellExperiment)
library(ggplot2)
library(GGally)
```

## Read in the transcript-level data and aggregate it

Here, we read in the edgeR object from `ARMOR`.

```{r}
x <- readRDS("data/edgeR_dge.rds")

# bit of code here taken from `ARMOR` reports
sg <- x$sg
metadata <- colData(sg)

df <- data.frame(totCount = colSums(assay(sg, "counts")), 
                 sample = colnames(assay(sg, "counts")), 
                 stringsAsFactors = FALSE)

ggplot(df, aes(x = sample, y = totCount)) + 
  geom_bar(stat = "identity") + 
  theme_bw() + xlab("") + ylab("Total read count") + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))

dge0 <- tximeta::makeDGEList(sg)
dge0$genes <- as.data.frame(rowRanges(sg))

# keep <- edgeR::filterByExpr(dge0, design = des)
# dge <- dge0[keep, ]
# dim(dge)

```


## Make an `DGEList` object and do some filtering


```{r, fig.width=8, fig.height=6}

# filter: CPM > 1 in at least 3 samples
cps <- edgeR::cpm(dge0)
rs <- rowSums(cps > 1) >= 3

dge <- dge0[rs, ]
dim(dge)

# # normalization
# dge <- calcNormFactors(dge)


# grouping variable (for design matrix)
ss <- strsplit(colnames(dge), "_", fixed=TRUE)
day <- sapply(ss, function(u) ifelse(grepl("2023",u[1]), u[2], u[1]))

colnames(dge) <- day

(grp <- sapply(strsplit(day, "-", fixed=TRUE), .subset, 1))

table(grp)
# design matrix
(mm <- model.matrix(~0+grp))

# book-keeping to include things in the table
dge$genes <- dge$genes[,c(1:3,5:6,9)]

cps <- edgeR::cpm(dge)
cps <- cps[,order(colnames(cps))]
dge$genes <- data.frame(dge$genes, round(cps, 2))

head(dge$genes)

# estimate dispersion
dge <- estimateDisp(dge,mm)

# quick plot for diagnosis
plotBCV(dge)
plotMDS(dge, cex = 2)

# fit GLM; test for diff b/w day 5 and day 0
f <- glmQLFit(dge,mm)
mc <- makeContrasts(grpDay5-grpDay0, levels=colnames(mm))
qlf <- glmQLFTest(f,contrast = mc)

# quick look at top genes
topTags(qlf)

# pull out table of statistics
tt <- topTags(qlf, n = Inf, sort.by = "none")

# crude filter on number of DE genes
w <- tt$table$FDR < .05 & abs(tt$table$logFC) > 1
table(w)

# P-value histogram
hist(tt$table$PValue, 200)

# MA plot
plotMD(qlf, ylim=c(-5,5))

# spot check on hypervariable genes
# w <- tt$table$logFC > 4 & d$tagwise.dispersion > 1.5 & tt$table$logCPM > 6 & tt$table$FDR > .2
# table(w)
# cpm(d)[w,][,c(1:3,9:11)]

table(w <- tt$table$FDR < .001 & abs(tt$table$logFC) > 4)


pdf("quick_heatmap.pdf", height=30, width=8)
pheatmap(log2(1+cps[w,c(1:3,9:11)]), 
         fontsize_row = 8)
dev.off()


# write statistics to table
write.table(tt$table, "22062023_DGE_gloria_illumina.tsv", sep = "\t",
            row.names = FALSE, quote = FALSE)

saveRDS(tt, "output/illumina_edgeR-DGE-topTags-table.rds")



pdf("ggpairs.pdf", width = 8, height = 8)
ggpairs( as.data.frame(log2(cps[,c(1:3,9:11)]+1)) )
dev.off()


# png("ggpairs_t.png", width = 800, height = 800)
# ggpairs( as.data.frame(log2(1+trans_counts[,-c(1:3)][,c(1:3,9:11)])) )
# dev.off()


cor(log2(cps[,c(1:3,9:11)]+1), method = "spearman")

cor(log2(cps[,c(1:3,9:11)]+1), method = "pearson")



```


## `sessionInfo()`

```{r}
sessionInfo()
```


