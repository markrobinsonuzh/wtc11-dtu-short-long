---
title: "DGE from David's tables"
format: html
self-contained: true
editor_options: 
  chunk_output_type: console
---

## DGE analysis

Here, we will run a preliminary vanilla edgeR analysis for the PacBio Revio data from Gloria and Madison, in order to get some quick DGE results.

## Load packages

```{r warning=FALSE, message=FALSE}
library(tidyr)
library(dplyr)
library(readr)
library(tibble)
library(edgeR)
library(pheatmap)
```

## Read in the transcript-level data and aggregate it

Here, we read in the transcript counts, and aggegrate them at the gene-level.

```{r}
# trans_file <- "data/20230606_wtc11_diff_combined_transcript_reads.tsv"
trans_file <- "data/20230606_wtc11_diff_combined_transcript_reads_11_samples_min.tsv"

trans_counts <- read_tsv(trans_file) %>% 
  replace(is.na(.), 0) %>%
  as.data.frame 

colSums(trans_counts[,-c(1:3)])

gene_counts <- trans_counts %>% group_by(associated_gene) %>%
  select(-transcript_id, -isoform) %>%
  summarise_all(sum) %>% column_to_rownames("associated_gene") %>%
  as.data.frame

colSums(gene_counts)

saveRDS(gene_counts, "output/pacbio-gene_counts.rds")


```


## Make an `DGEList` object and do some filtering


```{r, fig.width=8, fig.height=6}

# create edgeR container for the counts
d <- DGEList(counts=gene_counts)

# filter: CPM > 1 in at least 3 samples
cps <- cpm(d)
rs <- rowSums(cps > 1) >= 3
table(rs)
d <- d[rs,]

# normalization
d <- calcNormFactors(d)


# grouping variable (for design matrix)
(grp <- paste0("day", sapply(strsplit(colnames(d), "-", fixed=TRUE), .subset, 1)))

# design matrix
(mm <- model.matrix(~0+grp))

# book-keeping to include things in the table
d$genes <- data.frame(associated_gene = rownames(gene_counts)[rs])
cps <- cpm(d)
colnames(cps) <- paste0("s", colnames(cps))
d$genes <- data.frame(d$genes, round(cpm(d), 2))
head(d$genes)

# estimate dispersion
d <- estimateDisp(d,mm)

# quick plot for diagnosis
plotBCV(d)
plotMDS(d, cex = 2)

# fit GLM; test for diff b/w day 5 and day 0
f <- glmQLFit(d,mm)
mc <- makeContrasts(grpday5-grpday0, levels=colnames(mm))
qlf <- glmQLFTest(f,contrast = mc)

# quick look at top genes
topTags(qlf)

# pull out table of statistics
tt <- topTags(qlf, n = Inf, sort.by = "none")

# crude filter on number of DE genes
w <- tt$table$FDR < .05 & abs(tt$table$logFC) > 1
table(w)

# P-value histogram
hist(tt$table$PValue, 200)

# MA plot
plotMD(qlf, ylim=c(-5,5))

# spot check on hypervariable genes
# w <- tt$table$logFC > 4 & d$tagwise.dispersion > 1.5 & tt$table$logCPM > 6 & tt$table$FDR > .2
# table(w)
# cpm(d)[w,][,c(1:3,9:11)]

table(w <- tt$table$FDR < .005 & abs(tt$table$logFC) > 3)


pdf("quick_heatmap.pdf", height=20, width=8)
pheatmap(log2(1+cps[w,c(1:3,9:11)]), 
         fontsize_row = 8)
dev.off()


# write statistics to table
write.table(tt$table, "08062023_DGE_gloria_pacbio.tsv", sep = "\t",
            row.names = FALSE, quote = FALSE)

saveRDS(tt, "output/pacbio_edgeR-DGE-topTags-table.rds")

library(GGally)

pdf("ggpairs.pdf", width = 8, height = 8)
ggpairs( as.data.frame(log2(cps[,c(1:3,9:11)]+1)) )
dev.off()


png("ggpairs_t.png", width = 800, height = 800)
ggpairs( as.data.frame(log2(1+trans_counts[,-c(1:3)][,c(1:3,9:11)])) )
dev.off()


cor(log2(cps[,c(1:3,9:11)]+1), method = "spearman")

cor(log2(cps[,c(1:3,9:11)]+1), method = "pearson")



```


## `sessionInfo()`

```{r}
sessionInfo()
```


