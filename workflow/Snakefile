from snakemake.utils import min_version

min_version("7.30.1")

SAMPLES = ["day0-rep1", "day0-rep2", "day0-rep3", "day5-rep1", "day5-rep2", "day5-rep3"]


rule all:
    input:
        "results/quant_salmon",
        "results/quant_bambu",


rule mapping_convert_ubam_to_fastqz:
    input:
        "data-raw/{sample}.bam",
    output:
        "results/{sample}.fastq.gz",
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/bam2fastq.yaml"
    shell:
        "bam2fastq -o {output} {input}"


rule mapping_convert_gtf_to_bed:
    input:
        "data-raw/human_GRCh38_no_alt_plus_SIRV4.gtf",
    output:
        "results/human_GRCh38_no_alt_plus_SIRV4.bed",
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/minimap2.yaml"
    shell:
        "paftools.js gff2bed {input} > {output}"


rule mapping_run_minimap2:
    input:
        reads="data-raw/{sample}.fastq.gz",
        bed="results/human_GRCh38_no_alt_plus_SIRV4.bed",
        ref="data-raw/human_GRCh38_no_alt_plus_SIRV4.fasta",
    output:
        "results/{sample}.aligned.bam",
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/minimap2.yaml"
    shell:
        "minimap2 -ax splice:hq -t {threads} --junc-bed {input.bed} {input.ref} {input.reads} > {output}"


rule mapping_sort_mapped_files:
    input:
        "results/{sample}.aligned.bam",
    output:
        "results/{sample}.aligned.sorted.bam",
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools sort {input} -o {output}"


rule mapping_index_mapped_files:
    input:
        "results/{sample}.aligned.sorted.bam",
    output:
        "results/{sample}.aligned.sorted.bam.bai",
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools index {input} -o {output}"


rule mapping_create_transcriptome:
    input:
        ref="data-raw/human_GRCh38_no_alt_plus_SIRV4.fasta",
        gtf="data-raw/human_GRCh38_no_alt_plus_SIRV4.gtf",
    output:
        "results/human_GRCh38_no_alt_plus_SIRV4_transcriptome.fasta",
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/gffread.yaml"
    shell:
        "gffread -w {output} -g {input.ref} {input.gtf}"


rule quant_quantify_isoquant:
    input:
        reads=expand("results/{samples}.aligned.sorted.bam", samples=SAMPLES),
        indices=expand("results/{samples}.aligned.sorted.bam.bai", samples=SAMPLES),
        annotation="results/human_GRCh38_no_alt_plus_SIRV4.db",
        reference="data-raw/human_GRCh38_no_alt_plus_SIRV4.fasta",
    output:
        directory("results/quant_isoquant"),
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/isoquant.yaml"
    shell:
        """isoquant.py --reference {input.reference} \
            --genedb {input.annotation} \
            --bam {input.reads} \
            --data_type pacbio_ccs -o {output} \
            --complete_genedb \
            --no_model_construction \
            --threads {threads}"""


rule quant_quantify_bambu:
    input:
        reads=expand("results/{samples}.aligned.sorted.bam", samples=SAMPLES),
        indices=expand("results/{samples}.aligned.sorted.bam.bai", samples=SAMPLES),
        annotation="data-raw/human_GRCh38_no_alt_plus_SIRV4.gtf",
        reference="data-raw/human_GRCh38_no_alt_plus_SIRV4.fasta",
    output:
        directory("results/quant_bambu"),
    singularity:
        "docker://condaforge/mambaforge:23.1.0-3"
    conda:
        "envs/bambu.yaml"
    script:
        "scripts/run_bambu.R"
